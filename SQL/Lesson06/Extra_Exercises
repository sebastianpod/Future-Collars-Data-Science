DROP DATABASE IF EXISTS employees;
CREATE DATABASE IF NOT EXISTS employees;
USE employees;

SELECT 'CREATING DATABASE STRUCTURE' as 'INFO';

DROP TABLE IF EXISTS dept_emp,
                     dept_manager,
                     titles,
                     salaries, 
                     employees, 
                     departments;

CREATE TABLE employees (
    emp_no      INT             NOT NULL,
    birth_date  DATE            NOT NULL,
    first_name  VARCHAR(14)     NOT NULL,
    last_name   VARCHAR(16)     NOT NULL,
    gender      ENUM ('M','F')  NOT NULL,    
    hire_date   DATE            NOT NULL,
    PRIMARY KEY (emp_no)
);

CREATE TABLE departments (
    dept_no     CHAR(4)         NOT NULL,
    dept_name   VARCHAR(40)     NOT NULL,
    PRIMARY KEY (dept_no),
    UNIQUE  KEY (dept_name)
);

CREATE TABLE dept_manager (
   emp_no       INT             NOT NULL,
   dept_no      CHAR(4)         NOT NULL,
   from_date    DATE            NOT NULL,
   to_date      DATE            NOT NULL,
   FOREIGN KEY (emp_no)  REFERENCES employees (emp_no)    ON DELETE CASCADE,
   FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,
   PRIMARY KEY (emp_no,dept_no)
); 

CREATE TABLE dept_emp (
    emp_no      INT             NOT NULL,
    dept_no     CHAR(4)         NOT NULL,
    from_date   DATE            NOT NULL,
    to_date     DATE            NOT NULL,
    FOREIGN KEY (emp_no)  REFERENCES employees   (emp_no)  ON DELETE CASCADE,
    FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,
    PRIMARY KEY (emp_no,dept_no)
);

CREATE TABLE titles (
    emp_no      INT             NOT NULL,
    title       VARCHAR(50)     NOT NULL,
    from_date   DATE            NOT NULL,
    to_date     DATE,
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,
    PRIMARY KEY (emp_no,title, from_date)
) 
; 

CREATE TABLE salaries (
    emp_no      INT             NOT NULL,
    salary      INT             NOT NULL,
    from_date   DATE            NOT NULL,
    to_date     DATE            NOT NULL,
    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,
    PRIMARY KEY (emp_no, from_date)
) 
;

#Datas to download https://dev.mysql.com/doc/employee/en/

#zadanie 1
#Wyznacz dla każdego stanowiska średnie wynagrodzenie, zaokrąglij je do dwóch
#miejsc po przecinku i posortuj w kolejności malejącej.

SELECT t.title AS 'Job title', ROUND(AVG(s.salary),2) AS 'Average salaries'
FROM titles AS t, salaries AS s
WHERE t.emp_no = s.emp_no
GROUP BY t.title
ORDER BY AVG(s.salary) DESC;

#zadanie 2
#Znajdź wszystkich pracowników którzy pracowali w co najmniej dwóch departamentach.
#Wyświetl ich imię, nazwisko i liczbę departamentów w których pracowali. Wyniki
#posortuj rosnąco względem nazwiska.

SELECT e.first_name AS 'First name', e.last_name AS 'Last name', COUNT(*) AS 'Number of departments'
FROM employees AS e 
JOIN dept_emp AS d ON e.emp_no = d.emp_no
GROUP BY d.emp_no
HAVING COUNT(*) > 1
ORDER BY e.first_name;

#zadanie 3
#Wyświetl imię, nazwisko i wynagrodzenie najlepiej zarabiającego pracownika.

SELECT CONCAT(employees.first_name, ' ', employees.last_name) AS 'Full name', salaries.salary
FROM employees 
JOIN salaries ON employees.emp_no = salaries.emp_no
WHERE salaries.salary = (SELECT MAX(salary) FROM salaries);

#zadanie 4
#Wyświetl imię, nazwisko i wynagrodzenie drugiego najlepiej zarabiającego pracownika.

SELECT CONCAT(e.first_name , ' ' , e.last_name) AS 'The second highest-earning employee' , s.salary
FROM employees e JOIN salaries s
ON e.emp_no = s.emp_no
ORDER BY s.salary LIMIT 1 OFFSET 1;

#zadanie 5
#Wyświetl każdy departament i wiek najmłodszego pracownika który został w nim zatrudniony.

SELECT dept.dept_name,
MIN (TIMESTAMPDIFF(YEAR, e.birth_date , e.hire_date )) AS age_hire_date
FROM employees e
JOIN dept_emp d_emp ON e . emp_no = d_emp.emp_no
JOIN departments dept ON d_emp.dept_no = dept.dept_no
GROUP BY dept.dept_name;

#zadanie 6
#Znajdź wszystkich pracowników którzy nie mają samogłosek w imieniu (‘a’, ‘e’, ‘i’, ‘o’,
‘u’), wyświetl ich imię, nazwisko i departament w którym pracują.

SELECT CONCAT(e.first_name, ' ', e.last_name) AS 'Full name', d.dept_name
FROM employees e, departments d
JOIN dept_emp de ON e.emp_no = de.emp_no
JOIN departments d ON d.dept_name = de.dept_no = d.dept_no
WHERE e.first_name NOT LIKE '%a%'
AND e.first_name NOT LIKE '%e%'
AND e.first_name NOT LIKE '%i%'
AND e.first_name NOT LIKE '%o%'
AND e.first_name NOT LIKE '%u%';

#Znajdź wszystkie działy, które miały menedżera w okresie od 1 stycznia 2000 do 31 grudnia 2005. 
#Wyświetl nazwę działu, imie i nazwisko menedżera, datę rozpoczęcia i zakończenia zarządzania

SELECT d.dept_name , e.first_name , e.last_name , dm.from_date , dm.to_date
FROM dept_manager dm
LEFT JOIN 	departments d 	ON dm.dept_no = d.dept_no
LEFT JOIN	employees e 	ON dm.emp_no = e.emp_no
WHERE (dm.from_date >= '2000-01-01' AND dm.to_date <= '2005-12-31') OR dm.to_date IS NULL;

#Policz, ile pracowników zatrudnionych w dziale "Sales" ma obecnie aktywne zatrudnienie. 
#Wyświetl liczbę pracowników.

SELECT DISTINCT dept_name
FROM departments;

SELECT MAX(to_date) 
FROM dept_emp;

UPDATE dept_emp SET to_date=CURDATE() WHERE to_date = '9999-01-01';

SELECT MAX(to_date) 
FROM dept_emp;

UPDATE dept_emp SET to_date = '9999-01-01' WHERE to_date = CURDATE();

SELECT COUNT(*)
FROM dept_emp de
JOIN departments d
ON de.dept_no = d.dept_no
WHERE de.to_date >= CURDATE()
GROUP BY d.dept_name
HAVING dept_name LIKE 'Sales';

#Znajdź pracowników, którzy mieli najwięcej stanowisk w historii zatrudnienia. 
#Wyświetl identyfikator pracownika, imię i nazwisko oraz liczbę różnych stanowisk.

SELECT e.emp_no , e.first_name , e.last_name , COUNT(DISTINCT de.dept_no)
FROM employees e 
JOIN dept_emp de ON e.emp_no = de.emp_no
GROUP BY e.emp_no , e.first_name , e.last_name
ORDER BY COUNT(de.dept_no) DESC LIMIT 1;

#Znajdź średnią długość zatrudnienia (w latach) dla pracowników 
#zatrudnionych w dziale "Human Resources".

UPDATE dept_emp SET to_date = CURDATE() WHERE to_date = '9999-01-01';

SELECT AVG(TIMESTAMPDIFF(YEAR , de.from_date , de.to_date))
FROM dept_emp de
JOIN departments d ON de.dept_no = d.dept_no
WHERE d.dept_name LIKE 'Human Resources'; 

#Znajdź działy, które istnieją w tabeli "departments", ale nie mają żadnych informacji 
#w tabeli "dept_manager". Wyświetl identyfikator działu i nazwę działu.

SELECT DISTINCT d.dept_no , d.dept_name
FROM departments d
RIGHT JOIN dept_manager dm
ON d.dept_no = dm.dept_no;

#Znajdź pracowników, którzy pracowali w co najmniej trzech różnych działach. 
#Wyświetl ich identyfikator pracownika, imię, nazwisko i liczbę różnych działów, w których pracowali.

SELECT e.emp_no , e.first_name , e.last_name , COUNT(de.dept_no)
FROM employees e
JOIN dept_emp de
ON e.emp_no = de.emp_no
GROUP BY e.emp_no , e.first_name , e.last_name
HAVING COUNT(de.dept_no) >= 3;

#Znajdź działy, w których pracowali zarówno mężczyźni, jak i kobiety. 
#Wyświetl identyfikator działu, nazwę działu oraz liczbę pracowników 
#mężczyzn i kobiet w każdym z tych działów.

SELECT d.dept_no , d.dept_name , COUNT(DISTINCT de.emp_no)
FROM departments d
JOIN dept_emp de ON d.dept_no = de.dept_no
JOIN employees e ON de.emp_no = e.emp_no
WHERE e.gender IN('M','F')
GROUP BY d.dept_no , d.dept_name
HAVING COUNT(DISTINCT e.gender) = 2;

#Znajdź działy, które mają więcej pracowników niż średnia liczba pracowników we wszystkich działach. 
#Wyświetl identyfikator działu, nazwę działu i liczbę pracowników w każdym z tych działów.

SELECT d.dept_no , d.dept_name , COUNT(DISTINCT de.emp_no)
FROM departments d 
JOIN dept_emp de 
ON d.dept_no = de.dept_no
GROUP BY dept_no
HAVING COUNT(DISTINCT de.emp_no) > (SELECT ROUND((COUNT(DISTINCT de.emp_no) / COUNT(DISTINCT d.dept_no)),0) 
									FROM dept_emp de , departments d)
ORDER BY COUNT(DISTINCT de.emp_no);                                    

#Znajdź pracowników, którzy mieli najwięcej różnych stanowisk. 
#Wyświetl ich identyfikator pracownika, imię, nazwisko i liczbę różnych stanowisk, na których pracowali.

SELECT e.emp_no, e.first_name, e.last_name, COUNT(DISTINCT jt.title) AS num_titles
FROM employees e
JOIN titles jt ON e.emp_no = jt.emp_no
GROUP BY e.emp_no, e.first_name, e.last_name
HAVING num_titles = (
    SELECT MAX(title_count)
    FROM (
        SELECT COUNT(DISTINCT jt.title) AS title_count
        FROM titles jt
        GROUP BY jt.emp_no
    ) AS title_counts
);

#Znajdź działy, które miały najwyższe średnie wynagrodzenie pracowników. 
#Wyświetl identyfikator działu, nazwę działu oraz średnie wynagrodzenie w każdym z tych działów.

SELECT d.dept_no , d.dept_name , ROUND(AVG(s.salary),2)
FROM departments d
JOIN dept_emp de ON d.dept_no = de.dept_no
JOIN salaries s ON de.emp_no = s.emp_no
GROUP BY d.dept_name
ORDER BY AVG(s.salary) DESC;

#Znajdź działy, w których pracownicy mają najwyższe wynagrodzenia w danym okresie. 
#Wyświetl identyfikator działu, nazwę działu, datę oraz średnie wynagrodzenie pracowników w danym okresie

SELECT DISTINCT from_date , to_date
FROM salaries
ORDER BY from_date;

SELECT d.dept_no , d.dept_name , MIN(s.from_date) , AVG(s.salary)
FROM departments d 
JOIN dept_emp de ON d.dept_no = de.dept_no
JOIN salaries s ON de.emp_no = s.emp_no
WHERE s.from_date BETWEEN '1985-01-10' AND '1985-02-28'
GROUP BY d.dept_no , d.dept_name 
ORDER BY d.dept_no , AVG(s.salary) DESC;

#Znajdź wszystkich pracowników, którzy pracowali w dziale "Sales" (tabela departments i dept_emp), 
#ale nie pracują tam obecnie. Wyświetl ich imię, nazwisko, datę zatrudnienia i datę zwolnienia.

SELECT e.first_name , e.last_name , de.from_date , de.to_date
FROM employees e
JOIN dept_emp de ON e.emp_no = de.emp_no
JOIN departments d ON de.dept_no = d.dept_no
WHERE d.dept_name LIKE 'Sales' AND de.to_date != CURDATE();
